{
  "blog template": {
    "scope": "markdown",
    "prefix": "blog",
    "body": [
      "<blockquote>",
      "</blockquote>",
      "",
      "## Agenda",
      "  * [agenda 1](#agenda-1)",
      "  * [agenda 2](#agenda-2)",
      "  * [agenda 3](#agenda-3)",
      "  * [agenda 4](#agenda-4)",
      "  * [agenda 5](#agenda-5)",
      "",
      "### agenda 1 <a name=\"agenda-1\"></a>",
      "### agenda 2 <a name=\"agenda-2\"></a>",
      "### agenda 3 <a name=\"agenda-3\"></a>",
      "### agenda 4 <a name=\"agenda-4\"></a>",
      "### agenda 5 <a name=\"agenda-5\"></a>",
      "",
      "",
      "---",
      "",
      "## Conclusion",
      "",
      "",
      "---",
      "",
      "## Reference",
      "  * "
    ]
  },
  "unit test template": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "dit",
    "body": [
      "describe('${1:name}', () => {",
      "  it('should ', () => {",
      "    expect(fn.${1:name}()).toBe();",
      "  });",
      "});"
    ]
  },
  "React Component": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "rcom",
    "body": [
      "import React, { Component } from 'react';",
      "import PropTypes from 'prop-types';",
      "import styles from './${TM_FILENAME_BASE}.style';",
      "",
      "export default class ${TM_FILENAME_BASE} extends Component {",
      "  static propTypes = {};",
      "  static defaultProps = {};",
      "",
      "  render() {",
      "    return (",
      "      <div>",
      "        ${TM_FILENAME_BASE}",
      "        <style jsx>{styles}</style>",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      ""
    ],
    "description": ""
  },
  "React Functional Component": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "rfcom",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import styles from './${TM_FILENAME_BASE}.style';",
      "",
      "const ${TM_FILENAME_BASE} = () => {",
      "  return (",
      "    <div>",
      "      ${TM_FILENAME_BASE}",
      "      <style jsx>{styles}</style>",
      "    </div>",
      "  );",
      "}",
      "",
      "${TM_FILENAME_BASE}.propTypes = {};",
      "${TM_FILENAME_BASE}.defaultProps = {};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": ""
  },
  "React Typescript Functional Component": {
    "scope": "typescript,typescriptreact",
    "prefix": "rtcom",
    "body": [
      "import React from 'react';",
      "import styles from './${TM_FILENAME_BASE}.style';",
      "",
      "type Props = {",
      "  prop1?: string;",
      "  prop2?: number;",
      "  prop3?: boolean;",
      "}",
      "",
      "const ${TM_FILENAME_BASE} = ({ prop1, prop2, prop3 }: Props) => {",
      "  return (",
      "    <div className=\"wrapper\">",
      "      ${TM_FILENAME_BASE}",
      "      <style jsx>{styles}</style>",
      "    </div>",
      "  );",
      "}",
      "",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": ""
  },
  "React Typescript Functional Component with FC": {
    "scope": "typescript,typescriptreact",
    "prefix": "rtfcom",
    "body": [
      "import React from 'react';",
      "import styles from './${TM_FILENAME_BASE}.style';",
      "",
      "type Props = {",
      "  prop1?: string;",
      "  prop2?: number;",
      "  prop3?: boolean;",
      "}",
      "",
      "const ${TM_FILENAME_BASE}: React.FC<Props> = ({ prop1, prop2, prop3 }) => {",
      "  return (",
      "    <div className=\"wrapper\">",
      "      ${TM_FILENAME_BASE}",
      "      <style jsx>{styles}</style>",
      "    </div>",
      "  );",
      "}",
      "",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": ""
  },
  "React Typescript Container": {
    "scope": "typescript,typescriptreact",
    "prefix": "rtcon",
    "body": [
      "import { connect } from 'react-redux';",
      "import { createStructuredSelector } from 'reselect';",
      "import { makeSelector } from 'src/redux/selectors/someReduxSelector';",
      "import { load } from 'src/redux/modules/someReduxModule';",
      "import Component from './Component';",
      "",
      "const makeMapStateToProps = () => {",
      "  return (state, props) => {",
      "    return createStructuredSelector({",
      "      isLoaded: makeSelector,",
      "    })(state);",
      "  };",
      "};",
      "",
      "const mapDispatchToProps = {",
      "  load,",
      "};",
      "",
      "export default connect(makeMapStateToProps, mapDispatchToProps)(Component);"
    ],
    "description": ""
  },
  "styled-jsx sketch": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "style",
    "body": [
      "import css from 'styled-jsx/css';",
      "import * as vars from '../../styles/vars';",
      "",
      "export default css`",
      "  .wrapper {",
      "    width: 100%;",
      "  }",
      "`;",
      ""
    ],
    "description": ""
  },
  "jest sketch": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "jest",
    "body": [
      "import React from 'react';",
      "import { mount } from 'enzyme';",
      "import ${1:component} from '../${1:component}';",
      "",
      "describe('<${1:component} />', () => {",
      "  let makeSubject;",
      "",
      "  beforeEach(() => {",
      "    jest.resetModules();",
      "",
      "    makeSubject = params => {",
      "      const defaultProps = {};",
      "      const props = {",
      "        ...defaultProps,",
      "        ...params,",
      "      };",
      "",
      "      return mount(<${1:component} {...props} />);",
      "    };",
      "  });",
      "",
      "  it('should ${2:xxx}', () => {",
      "    const subject = makeSubject();",
      "",
      "    expect(true).toBe(false);",
      "  });",
      "});",
      ""
    ],
    "description": ""
  },
  "React Component with styled-component": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "rcomTs",
    "body": [
      "import React, { Component } from 'react'",
      "import { Wrapper } from './${TM_FILENAME_BASE}.style'",
      "",
      "type ${TM_FILENAME_BASE}Props = {",
      "}",
      "export default class ${TM_FILENAME_BASE} extends Component<${TM_FILENAME_BASE}Props> {",
      "",
      "  render() {",
      "    return (",
      "      <Wrapper>",
      "        ${TM_FILENAME_BASE}",
      "      </Wrapper>",
      "    );",
      "  }",
      "}",
      "",
      ""
    ],
    "description": ""
  },
  "styled-component": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "styCom",
    "body": [
      "import styled, { css } from 'styled-components/macro'",
      "// import {} from '../../styles/vars'",
      "",
      "type componentProps = {",
      "  color?: string",
      "}",
      "const base = css`",
      "  color: ${(props: componentProps) => props.color || vars.defaultColor};",
      "`",
      "export const Wrapper = styled.div`",
      "  \\${base\\}",
      "  font-size: 12px;",
      "`"
    ],
    "description": ""
  },
  "amp-boilerplate": {
    "scope": "html",
    "prefix": "amp",
    "body": [
      "<!DOCTYPE html>",
      "<html amp lang=\"en\">",
      "  <head>",
      "    <meta charset=\"utf-8\" />",
      "    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>",
      "    <title></title>",
      "    <link rel=\"canonical\" href=\"http://example.ampproject.org/article-metadata.html\" />",
      "    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\" />",
      "    <!-- prettier-ignore -->",
      "    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>",
      "    <!-- prettier-ignore -->",
      "    <noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>",
      "  </head>",
      "  <body>",
      "  </body>",
      "</html>"
    ],
    "description": ""
  }
}